const input = require('fs').readFileSync('/dev/stdin', 'utf8');
// const input = require('fs').readFileSync('./stdin', 'utf8');

const lines = input.split('\n')
const operador = lines.shift()

// [a]i(i+1)

const executar = (matriz, operar) => {

    const ordem_matricial = () => Math.sqrt(matriz.length)

    const somar = (execucoes = 0, rodada = 1, casa = 1, soma = 0) => {
        const processar = () => {
            execucoes += 1
            const x = matriz[casa]

            if(execucoes == (ordem_matricial() - rodada)) casa = casa + rodada + 1
            
            somar(
                (execucoes == (ordem_matricial() - rodada) ? 0 : execucoes),
                (execucoes == (ordem_matricial() - rodada) ? ++rodada : rodada),
                ++casa,
                (soma + x)
            )
        }

        const imprimir = () => {
            console.log(soma.toFixed(1))
        }

        return rodada == ordem_matricial()
            ? imprimir()
            : processar()
    }

    const media = (execucoes = 0, rodada = 1, casa = 1, soma = 0, indices = 0) => {
        const processar = () => {
            execucoes += 1
            const x = matriz[casa]

            if(execucoes == (ordem_matricial() - rodada)) casa = casa + rodada + 1
            
            media(
                (execucoes == (ordem_matricial() - rodada) ? 0 : execucoes),
                (execucoes == (ordem_matricial() - rodada) ? ++rodada : rodada),
                ++casa,
                (soma + x),
                (++indices),
            )
        }

        const imprimir = () => {
            console.log((soma / indices).toFixed(1))
        }

        return rodada == ordem_matricial()
            ? imprimir()
            : processar()
    }

    if(operar == 'S') somar()
    
    if(operar == 'M') media()
}

executar(lines.map(e => Number(e)), operador.replace('\r', ''))


// Teste

// M
// 8.100234762781938
// 5.941903912216667
// 1.6710489873030898
// 7.429174245120366
// 6.177518418044389
// 9.1620430840595
// 1.1792080597766996
// 8.818376164348734
// 3.4143074257085293
// 3.374987695389675
// 5.829487537020068
// 2.4230074759812648
// 4.6208439648074044
// 6.324587956273124
// 6.582744713655259
// 3.6784033071069966
// 7.666099308673
// 3.9849531483514644
// 4.3278262603009825
// 1.4086939992761138
// 4.81910847834035
// 6.2343904415156715
// 6.919204396671221
// 9.174173792776784
// 0.5229536751261521
// 6.2998953787321765
// 1.1074598901231147
// 6.672054640121365
// 8.810198712726311
// 1.3878553023125861
// 7.509145746997166
// 3.21747624262559
// 8.082769348084822
// 6.451226740968945
// 8.788780622197411
// 1.490973699619178
// 5.918295762228216
// 5.152476068142771
// 7.796048912883111
// 9.921263128211757
// 4.215807102218141
// 3.2292053324257552
// 9.159837752734477
// 3.9059065057314357
// 9.605807645285452
// 5.6426680386107675
// 3.720009599930052
// 1.4981793289676726
// 4.942137039724135
// 0.4146150605021881
// 0.046555349414509895
// 8.556686419201343
// 2.124782709153672
// 7.72908229709675
// 8.485595185827762
// 4.2159646332551866
// 6.491031744471192
// 7.685112997338599
// 5.726343319084934
// 4.3045606840943185
// 1.612750095725377
// 5.569411264307147
// 3.6525714134732823
// 1.4311837763263258
// 9.183094650295672
// 7.047144954178773
// 8.03816744462436
// 9.570975958679465
// 7.1505207559503585
// 1.7333679568778804
// 0.26101662771447875
// 4.119506196672667
// 0.20220806338376418
// 8.790546121620606
// 8.31074975848761
// 5.719565933746429
// 7.633294489992815
// 6.297814772610981
// 4.411344615488543
// 4.417666945384755
// 3.9356546347172583
// 3.1732836594767333
// 9.046089436900717
// 7.90327368760037
// 8.754491572543518
// 0.4430581680252188
// 0.23410908275733
// 8.860489039179743
// 9.385303367920237
// 2.6764039233150183
// 3.345275974794588
// 9.923343580123444
// 9.0920010368249
// 0.22910484617939098
// 7.67696519199635
// 5.7827703157660615
// 1.0917202173128282
// 5.235238121798305
// 2.2820206340866678
// 9.837874508084205
// 2.0830296952268257
// 9.321698100118311
// 0.1861582659618799
// 7.7502991820533795
// 8.51227057759791
// 7.2482772453094535
// 8.120085819313106
// 2.239253888884858
// 5.048556885206237
// 0.4692658243249803
// 8.937869565309581
// 4.652441292238397
// 6.312252517140456
// 5.4425005515500775
// 9.163807334043248
// 4.575356342341747
// 3.0655715698261887
// 8.47424136320782
// 3.781766846553507
// 6.34193432739679
// 3.563825607728681
// 9.083612048621283
// 2.7516936778665335
// 7.568116706190471
// 5.74514637170415
// 1.5152388271122708
// 7.075678114675847
// 0.7695764319640963
// 8.623291272438678
// 2.7786503758896552
// 1.2751433033413173
// 4.505747653857051
// 3.2249820299886323
// 8.70787620188133
// 4.077418912298909
// 9.742144718410369
// 1.5010973411338924
// 5.109119851854782
// 5.61987539506958
// 5.8226544787263945
// 7.396319692665783
// 2.3357630689202113
// 3.8594125414674263
// 0.4719487813868173